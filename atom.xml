<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MouZaiSi-Demo.github.io/</id>
    <title>某在斯_Dome </title>
    <updated>2021-01-01T18:52:43.946Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://MouZaiSi-Demo.github.io/"/>
    <link rel="self" href="https://MouZaiSi-Demo.github.io/atom.xml"/>
    <subtitle>MouZaiSi&apos;s Blogs</subtitle>
    <logo>https://MouZaiSi-Demo.github.io/images/avatar.png</logo>
    <icon>https://MouZaiSi-Demo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 某在斯_Dome </rights>
    <entry>
        <title type="html"><![CDATA[自增自减]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/zi-zeng-zi-jian/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/zi-zeng-zi-jian/">
        </link>
        <updated>2021-01-01T18:52:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c">i++的过程为

int temp = i；

i = i + 1；

return a；//返回的是临时变量

++i的过程为

i = i + 1；

return i；
</code></pre>
<p>两者的底层实现不同，同理适用于自减。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 指针数组 char * 和 char []到底有什么不一样?]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/zhi-zhen-shu-zu-char-he-char-dao-di-you-shi-me-bu-yi-yang/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/zhi-zhen-shu-zu-char-he-char-dao-di-you-shi-me-bu-yi-yang/">
        </link>
        <updated>2020-12-30T13:23:35.000Z</updated>
        <content type="html"><![CDATA[<p>## <strong>数组指针做形参</strong></p>
<p>把数组从主调函数传到被调函数时,我们可以传数组的首地址和数组长度就可以，为什么不是传递数组呢？还是为了效率，下面用代码说明：</p>
<p>```c</p>
<p>void Output(char *p, int len);</p>
<p>int main()</p>
<p>{</p>
<p>char str[] = &quot;HelloWorld HelloWorld HelloWorld HelloWorld HelloWorld HelloWorld &quot;;</p>
<p>Output(str, strlen(str));</p>
<p>system(&quot;pause&quot;);</p>
<p>return 0;</p>
<p>}</p>
<p>void Output(char *p, int len)</p>
<p>{</p>
<p>for (int i = 0; i &lt; len; ++i)</p>
<p>{</p>
<p>printf(&quot;%c&quot;, *(p + i));</p>
<p>}</p>
<p>}</p>
<p>```</p>
<p>如上，如果我们Output函数不是用指针的方式char *p，而是用数组的方式char p[]的话，有什么不一样？</p>
<p>我们定义的数组str有65字节，调用函数的话会传递这65字节的数组。</p>
<p>char *p指针大小是4字节，只需要传递4字节的数据就可以了，不止少传递数据，执行起来也更快了。</p>
<p>PS: 指针大小可以打印sizeof(int**),sizeof(char**)去验证。(因为如果操作系统的位数不一样 那么存储指针变量p的位数可能就不同 )</p>
<p>```c</p>
<p>char namea[] = &quot;earth&quot;;</p>
<p>char *pname = &quot;earth&quot;;</p>
<p>```</p>
<p>One is an array (the name <code>namea</code> refers to a <strong>block</strong> of characters).</p>
<p>The other is a pointer to a single character (the name <code>pname</code> refers to a pointer, which just happens to point to the first character of a block of characters).</p>
<p>Although the former will often decay into the latter, that's not always the case. Try doing a <code>sizeof</code> on them both to see what I mean.</p>
<p>The size of the array is, well, the size of the array (six characters, including the terminal null).</p>
<p>The size of the pointer is dependent on your pointer width (4 or 8, or whatever). The size of what <code>pname</code> <strong>points to</strong> is not the array, but the first character. It will therefore be 1.</p>
<p>You can also <strong>move</strong> pointers with things like <code>pname++</code> (unless they're declared constant, with something like <code>char *const pname = ...;</code> of course). You can't move an array name to point to it's second character (<code>namea++;</code>). -------  https://stackoverflow.com/questions/7886972/difference-between-char-and-char</p>
]]></content>
    </entry>
</feed>