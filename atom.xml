<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MouZaiSi-Demo.github.io/</id>
    <title>某在斯_Dome </title>
    <updated>2021-01-05T15:23:00.682Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://MouZaiSi-Demo.github.io/"/>
    <link rel="self" href="https://MouZaiSi-Demo.github.io/atom.xml"/>
    <subtitle>MouZaiSi&apos;s Blogs</subtitle>
    <logo>https://MouZaiSi-Demo.github.io/images/avatar.png</logo>
    <icon>https://MouZaiSi-Demo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 某在斯_Dome </rights>
    <entry>
        <title type="html"><![CDATA[数学知识——素数专题]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/shu-xue-zhi-shi-su-shu-zhuan-ti/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/shu-xue-zhi-shi-su-shu-zhuan-ti/">
        </link>
        <updated>2021-01-05T15:05:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="判断素数is_prime">判断素数(is_prime)</h2>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-hk/%E8%B4%A8%E6%95%B0">质数</a></p>
<p>指在大于<a href="https://zh.wikipedia.org/wiki/1">1</a>的<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E6%95%B0">自然数</a>中，除了1和该数自身外，无法被其他自然数<a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E9%99%A4">整除</a>的数（也可定义为只有1与该数本身两个正因数的数）。</p>
</blockquote>
<p>1.质数的判定</p>
<p>先给出定义下的c++代码</p>
<pre><code class="language-c++">bool is_prime(int x)
{
    if (x &lt; 2) return false;
    for (int i = 2; i &lt;= x ; i ++ )
        if (x % i == 0)
            return false;
    return true;
}
</code></pre>
<p>此时这个算法的时间复杂度是O(n) 效率比较低</p>
<p>素数有个性质 d | n =&gt; n/d | n  所以每次都枚举较小的那一个 也就是d 小于等于n/d</p>
<p>也就是d*d &lt;n =&gt;</p>
<hr>
<p>d&lt; sqrt(n)  此时时间复杂度就是O(根号n)</p>
<pre><code class="language-c++">bool is_prime(int x)
{
    if (x &lt; 2) return false;
    for (int i = 2; i &lt;= x/i ; i ++ )
        if (x % i == 0)
            return false;
    return true;
}
</code></pre>
<p>——————试除法试根</p>
<hr>
<p>当然 可能很多人会像下面那样写</p>
<pre><code>for (int i = 2; i &lt;= sqrt(x) ; i ++ )
</code></pre>
<p>这样子不推荐 因为每一次循环都会执行一下sqrt函数 本身sqrt函数就比较慢</p>
<pre><code class="language-c++">for (int i = 2; i * i &lt;= x ; i ++ )
</code></pre>
<p>这样子看似可以 但是i如果是int 那么最大只有2的31次(正数) 当x非常接近于2的31次时 (i+1)的平方就溢出了 这样根据编码 会变成负数</p>
<hr>
<p>未完待续......</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[12个Visual Studio调试效率技巧(搬运)]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/12-ge-visual-studio-diao-shi-xiao-lu-ji-qiao-ban-yun/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/12-ge-visual-studio-diao-shi-xiao-lu-ji-qiao-ban-yun/">
        </link>
        <updated>2021-01-05T13:34:39.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/157625640">12个Visual Studio调试效率技巧 - 芝麻麻雀的文章 - 知乎</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ (*p)++和*p++的区别?]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/phe-pde-qu-bie/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/phe-pde-qu-bie/">
        </link>
        <updated>2021-01-05T06:31:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="p">【 *p++ 】</h3>
<p>后缀递增 <code>++</code> 的优先级 比 取值运算符 <code>*</code> 高 ，<br>
所以 <code>*p++</code> 等价 <code>*(p++)</code> ，</p>
<p>后缀递增 <code>p++</code> 会先返回 <code>p</code> ，然后 <code>p = p + 1</code> 。<br>
所以 <code>*(p++)</code> 返回 <code>*p</code> ，然后把 <code>p</code> 的地址加一。<br>
（这个 加一 所增加的值取决于指针类型）</p>
<h3 id="p-2">【 (*p)++ 】</h3>
<p>括弧决定了结合优先级，取值运算符 <code>*</code> 会被先结合，<br>
所以会先对 <code>p</code> 的地址取值，取得地址上的数值。<br>
然后把这个值加一。</p>
<h2 id="主要区别"><strong>主要区别：</strong></h2>
<p><code>*p++</code> 是 返回 <code>*p</code> ，然后把 <code>p</code> 的地址加一。<br>
<code>(*p)++</code> 是取值 <code>p</code> ，然后把这个值加一，返回<code>(*p)</code> 。</p>
<p><code>*p++</code> 这个 <code>++</code> 的操作是针对地址。<br>
<code>(*p)++</code> 这个 <code>++</code> 的操作是针对地址上的值。</p>
<hr>
<p>这个区别主要是优先级造成的,所以下面贴上c语言的优先级<br>
<img src="https://MouZaiSi-Demo.github.io//post-images/1609828714533.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用netsh在windows上寻找已连过的wifi密码]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/li-yong-netsh-zai-windows-shang-xun-zhao-yi-lian-guo-de-wifi-mi-ma/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/li-yong-netsh-zai-windows-shang-xun-zhao-yi-lian-guo-de-wifi-mi-ma/">
        </link>
        <updated>2021-01-05T03:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>首先得知道netsh是什么</p>
<p><strong>netsh简介</strong></p>
<p>是windows系统本身提供的功能强大的网络配置命令行工具,常用命令如下:</p>
<p>查看ip配置信息:</p>
<pre><code>netsh interface ip show config 
</code></pre>
<p>查看网络配置文件:</p>
<pre><code>netsh -c interface dump
</code></pre>
<p>开/关网卡:</p>
<pre><code>netsh int set int name=&quot;ethernet&quot; admin=enabled 

netsh int set int name=&quot;ethernet&quot;admin=disabled
</code></pre>
<p>查看所有tcp连接:</p>
<pre><code>netsh interface ip show tcpconnections 
</code></pre>
<p>设置本机ip、子网掩码、网关ip:</p>
<pre><code>netsh interface ip set address &quot;Local Area Connection&quot;static 192.168.1.2 255.255.255.0 192.168.1.1
</code></pre>
<p>开/关防火墙:</p>
<pre><code class="language-text">netsh firewall set opmode enable 

netsh firewall set opmode disable 
</code></pre>
<p>记不住也完全没关系,可以直接在命令行内输入netsh ?来获取接下来的命令</p>
<pre><code>下列指令有效:

此上下文中的命令:
..             - 移到上一层上下文级。
?              - 显示命令列表。
abort          - 丢弃在脱机模式下所做的更改。
add            - 在项目列表上添加一个配置项目。
advfirewall    - 更改到 `netsh advfirewall' 上下文。
alias          - 添加一个别名
bridge         - 更改到 `netsh bridge' 上下文。
bye            - 退出程序。
commit         - 提交在脱机模式中所做的更改。
delete         - 在项目列表上删除一个配置项目。
dhcpclient     - 更改到 `netsh dhcpclient' 上下文。
dnsclient      - 更改到 `netsh dnsclient' 上下文。
dump           - 显示一个配置脚本。
exec           - 运行一个脚本文件。
exit           - 退出程序。
firewall       - 更改到 `netsh firewall' 上下文。
help           - 显示命令列表。
http           - 更改到 `netsh http' 上下文。
interface      - 更改到 `netsh interface' 上下文。
ipsec          - 更改到 `netsh ipsec' 上下文。
lan            - 更改到 `netsh lan' 上下文。
mbn            - 更改到 `netsh mbn' 上下文。
namespace      - 更改到 `netsh namespace' 上下文。
netio          - 更改到 `netsh netio' 上下文。
offline        - 将当前模式设置成脱机。
online         - 将当前模式设置成联机。
p2p            - 更改到 `netsh p2p' 上下文。
popd           - 从堆栈上打开一个上下文。
pushd          - 将当前上下文放入堆栈。
quit           - 退出程序。
ras            - 更改到 `netsh ras' 上下文。
rpc            - 更改到 `netsh rpc' 上下文。
set            - 更新配置设置。
show           - 显示信息。
trace          - 更改到 `netsh trace' 上下文。
unalias        - 删除一个别名。
wcn            - 更改到 `netsh wcn' 上下文。
wfp            - 更改到 `netsh wfp' 上下文。
winhttp        - 更改到 `netsh winhttp' 上下文。
winsock        - 更改到 `netsh winsock' 上下文。
wlan           - 更改到 `netsh wlan' 上下文。

下列的子上下文可用:
 advfirewall bridge dhcpclient dnsclient firewall http interface ipsec lan mbn namespace netio p2p ras rpc trace wcn wfp winhttp winsock wlan
</code></pre>
<hr>
<p>现在回到主题</p>
<p>我们要利用cmd来获取已连接过的widows密码</p>
<p>1.Windows键+R</p>
<p>2.输入cmd 打开命令窗口</p>
<p>3.输入</p>
<ul>
<li>
<p>netsh wlan show profiles //这时候会出现连接过的WiFi名字</p>
</li>
<li>
<p>netsh wlan show profiles name=&quot;<em><strong>具体的WiFi名称</strong></em>&quot; key=clear //这样就显示了WiFi密码</p>
</li>
</ul>
<hr>
<p>以我的wifi来做例子</p>
<p>输入第一条命令后</p>
<pre><code>C:\Users\17956&gt;netsh wlan show profiles

接口 WLAN 上的配置文件:


组策略配置文件(只读)
---------------------------------
    &lt;无&gt;

用户配置文件
-------------
    所有用户配置文件 : mzs
    所有用户配置文件 : i-WZU
    所有用户配置文件 : WZU-free
    所有用户配置文件 : CMCC-pun2
    所有用户配置文件 : zhazha
    所有用户配置文件 : CMCC-YfQX
    所有用户配置文件 : 数zhazha
    所有用户配置文件 : CMCC-7gmf

</code></pre>
<p>输入第二条命令</p>
<pre><code>C:\Users\17956&gt;netsh wlan show profiles name=&quot;mzs&quot; key=clear

接口 WLAN 上的配置文件 mzs:
=======================================================================

已应用: 所有用户配置文件

配置文件信息
-------------------
    版本                   : 1
    类型                   : 无线局域网
    名称                   : mzs
    控制选项               :
        连接模式           : 自动连接
        网络广播           : 只在网络广播时连接
        AutoSwitch         : 请勿切换到其他网络
        MAC 随机化: 禁用

连接设置
---------------------
    SSID 数目              : 1
    SSID 名称              :“mzs”
    网络类型               : 结构
    无线电类型             : [ 任何无线电类型 ]
    供应商扩展名           : 不存在

安全设置
-----------------
    身份验证         : WPA2 - 个人
    密码                 : CCMP
    身份验证         : WPA2 - 个人
    密码                 : GCMP
    安全密钥               : 存在
    关键内容            : baibai123

费用设置
-------------
    费用                : 无限制
    阻塞                : 否
    接近数据限制        : 否
    过量数据限制        : 否
    漫游                : 否
    费用来源            : 默认

</code></pre>
<p>上面代码块中的关键内容就是这个wifi的wifi密码啦!</p>
<hr>
<p>注意:如果输入netsh的命令说 &quot;netsh不是内外部命令...&quot; 说明你的环境变量已经遭到改变(有可能是某些软件,或者你在配置编程环境变量的时候不小心改变).</p>
<p>拯救的方法很简单:</p>
<p>1.右键我的电脑</p>
<p>2.点高级系统设置(以Windows 10 为例)</p>
<p>3.点环境变量(N)...</p>
<p>4.找到名为path的变量 并双击它进入编辑环境变量界面</p>
<p>5.新建 输入%SystemRoot%\system32 按确定即可关闭所有界面</p>
<p>6.然后重新启动cmd再次输入netsh试试</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[欧几里得算法(辗转相除法)]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/ou-ji-li-de-suan-fa-zhan-zhuan-xiang-chu-fa/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/ou-ji-li-de-suan-fa-zhan-zhuan-xiang-chu-fa/">
        </link>
        <updated>2021-01-04T01:11:32.000Z</updated>
        <content type="html"><![CDATA[<p>我们先给出由递归加上三目运算符极致优化过的函数封装。</p>
<pre><code class="language-c++">int gcd(int a,int b)
{
    return b ? gcd(b , a % b) : a; 
}
</code></pre>
<p>在这里由基础数论给出结论：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>=</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo>(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>)</mo><mo>=</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo>(</mo><mi>x</mi><mi>a</mi><mo>+</mo><mi>y</mi><mi>b</mi><mo>)</mo><mo separator="true">,</mo><mi mathvariant="normal">其</mi><mi mathvariant="normal">中</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>⊂</mo><mi>R</mi><mi mathvariant="normal">　</mi><mi mathvariant="normal">　</mi><mo>(</mo><mo>∗</mo><mo>)</mo><mo>−</mo><mo>−</mo><mo>−</mo><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">除</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">意</mi><mi mathvariant="normal">思</mi><mo>(</mo><mi mathvariant="normal">右</mi><mi mathvariant="normal">边</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">除</mi><mi mathvariant="normal">数</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">d/a,d/b =&gt; d/(a+b) =&gt; d/(xa+yb),其中x,y \subset R 　　(*) ---这里的/是除的意思(右边是被除数)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">　</span><span class="mord cjk_fallback">　</span><span class="mopen">(</span><span class="mord">∗</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">的</span><span class="mord">/</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">意</span><span class="mord cjk_fallback">思</span><span class="mopen">(</span><span class="mord cjk_fallback">右</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">要</mi><mi mathvariant="normal">证</mi><mi mathvariant="normal">明</mi><mi>g</mi><mi>c</mi><mi>d</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo>(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mi mathvariant="normal">　</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi mathvariant="normal">　</mi><mi>b</mi><mo>)</mo><mi mathvariant="normal">先</mi><mi mathvariant="normal">证</mi><mi mathvariant="normal">明</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">者</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">约</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">相</mi><mi mathvariant="normal">同</mi></mrow><annotation encoding="application/x-tex">要证明 gcd(a,b)=gcd(b,a　mod　b)
先证明 两者公约数相同
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">明</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">　</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">　</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">明</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">同</span></span></span></span></span></p>
<p>先证明充分性：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi mathvariant="normal">　</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi mathvariant="normal">　</mi><mi>b</mi><mo>=</mo><mi>a</mi><mo>−</mo><mo>(</mo><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>)</mo><mo>∗</mo><mi>b</mi><mo>−</mo><mo>−</mo><mo>−</mo><mi mathvariant="normal">注</mi><mi mathvariant="normal">意</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">的</mi><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">整</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">除</mi><mi mathvariant="normal">法</mi></mrow><annotation encoding="application/x-tex">a　mod　b= a-(a/b)*b---注意这里的a/b是整数除法
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">　</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">　</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">意</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">a</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">法</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>−</mo><mo>(</mo><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>)</mo><mo>∗</mo><mi>b</mi><mo>&lt;</mo><mo>=</mo><mo>&gt;</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo>(</mo><mi>c</mi><mo>⊂</mo><mi>R</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">a-(a/b)*b &lt;=&gt;a-c*b(c\subset R)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">又</mi><mi mathvariant="normal">由</mi><mo>∗</mo><mi mathvariant="normal">式</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">　</mi><mi>d</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>=</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo>(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo>)</mo><mi mathvariant="normal">　</mi><mi mathvariant="normal">证</mi><mi mathvariant="normal">毕</mi></mrow><annotation encoding="application/x-tex">又由*式得　d/a,d/b=&gt;d/(a-c*b)　证毕
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord cjk_fallback">又</span><span class="mord cjk_fallback">由</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">　</span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord cjk_fallback">　</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">毕</span></span></span></span></span></p>
<p>再证明必要性:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">再</mi><mi mathvariant="normal">由</mi><mo>∗</mo><mi mathvariant="normal">式</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">的</mi><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo>(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo>)</mo><mo>=</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo>(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo>)</mo><mo>=</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>a</mi><mi mathvariant="normal">　</mi><mi mathvariant="normal">证</mi><mi mathvariant="normal">毕</mi></mrow><annotation encoding="application/x-tex">再由*式可的 d/b,d/(a-c*b) =&gt;d/b,d/(a-c*b+c*b)=&gt;d/b,d/a　证毕
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">由</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">　</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">毕</span></span></span></span></span></p>
<p>到这里,已经证明了(a,b)的公约数等于(b,a mod b)的公约数</p>
<p>所以他们的最大公约数相等</p>
<p>证毕</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法：归并排序]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/pai-xu-suan-fa-gui-bing-pai-xu/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/pai-xu-suan-fa-gui-bing-pai-xu/">
        </link>
        <updated>2021-01-02T09:00:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="排序算法"><a href="https://zhuanlan.zhihu.com/p/36075856">排序算法：<em>归并排序</em></a></h2>
<p>今天下午在写归并排序 推荐一下知乎的一个答主的文章:排序算法：归并排序 - 程序员囧辉的文章 - 知乎 https://zhuanlan.zhihu.com/p/36075856</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自增自减]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/zi-zeng-zi-jian/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/zi-zeng-zi-jian/">
        </link>
        <updated>2021-01-01T18:52:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c">i++的过程为

int temp = i；

i = i + 1；

return a；//返回的是临时变量

++i的过程为

i = i + 1；

return i；
</code></pre>
<p>两者的底层实现不同，同理适用于自减。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 指针数组 char * 和 char []到底有什么不一样?]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/zhi-zhen-shu-zu-char-he-char-dao-di-you-shi-me-bu-yi-yang/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/zhi-zhen-shu-zu-char-he-char-dao-di-you-shi-me-bu-yi-yang/">
        </link>
        <updated>2020-12-30T13:23:35.000Z</updated>
        <content type="html"><![CDATA[<p><strong>数组指针做形参</strong></p>
<p>把数组从主调函数传到被调函数时,我们可以传数组的首地址和数组长度就可以，为什么不是传递数组呢？还是为了效率，下面用代码说明：</p>
<pre><code class="language-c">
void Output(char *p, int len);



　　int main()

　　{

　　　　char str[] = &quot;HelloWorld HelloWorld HelloWorld HelloWorld HelloWorld HelloWorld &quot;;

　　　　Output(str, strlen(str));

　　　　system(&quot;pause&quot;);

　　　　return 0;

　　}



　　void Output(char *p, int len)

　　{

　　　　for (int i = 0; i &lt; len; ++i)

　　　　{

　　　　　　printf(&quot;%c&quot;, *(p + i));

　　　　}

　　}

</code></pre>
<p>如上，如果我们Output函数不是用指针的方式char *p，而是用数组的方式char p[]的话，有什么不一样？</p>
<p>我们定义的数组str有65字节，调用函数的话会传递这65字节的数组。</p>
<p>char *p指针大小是4字节，只需要传递4字节的数据就可以了，不止少传递数据，执行起来也更快了。</p>
<p>PS: 指针大小可以打印sizeof(int**),sizeof(char**)去验证。(因为如果操作系统的位数不一样 那么存储指针变量p的位数可能就不同 )</p>
<pre><code class="language-c">
char namea[] = &quot;earth&quot;;

char *pname = &quot;earth&quot;;

</code></pre>
<p>One is an array (the name <code>namea</code> refers to a <strong>block</strong> of characters).</p>
<p>The other is a pointer to a single character (the name <code>pname</code> refers to a pointer, which just happens to point to the first character of a block of characters).</p>
<p>Although the former will often decay into the latter, that's not always the case. Try doing a <code>sizeof</code> on them both to see what I mean.</p>
<p>The size of the array is, well, the size of the array (six characters, including the terminal null).</p>
<p>The size of the pointer is dependent on your pointer width (4 or 8, or whatever). The size of what <code>pname</code> <strong>points to</strong> is not the array, but the first character. It will therefore be 1.</p>
<p>You can also <strong>move</strong> pointers with things like <code>pname++</code> (unless they're declared constant, with something like <code>char *const pname = ...;</code> of course). You can't move an array name to point to it's second character (<code>namea++;</code>). -------  https://stackoverflow.com/questions/7886972/difference-between-char-and-char</p>
]]></content>
    </entry>
</feed>