<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MouZaiSi-Demo.github.io/</id>
    <title>某在斯_Dome </title>
    <updated>2021-04-02T10:02:17.696Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://MouZaiSi-Demo.github.io/"/>
    <link rel="self" href="https://MouZaiSi-Demo.github.io/atom.xml"/>
    <subtitle>MouZaiSi&apos;s Blogs</subtitle>
    <logo>https://MouZaiSi-Demo.github.io/images/avatar.png</logo>
    <icon>https://MouZaiSi-Demo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 某在斯_Dome </rights>
    <entry>
        <title type="html"><![CDATA[为什么求模运算要用素数（质数）—— 哈希表设计]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/wei-shi-me-qiu-mo-yun-suan-yao-yong-su-shu-zhi-shu-ha-xi-biao-she-ji/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/wei-shi-me-qiu-mo-yun-suan-yao-yong-su-shu-zhi-shu-ha-xi-biao-she-ji/">
        </link>
        <updated>2021-04-02T10:00:30.000Z</updated>
        <content type="html"><![CDATA[<p>转自<a href="http://www.vvbin.com/?p=376">为什么求模运算要用素数（质数）—— 哈希表设计</a></p>
<p>在设计用除法来散射的哈希表时，我们都会用数值模哈希表大小，得到的余数来作为ID存入哈希表对应格子中。所有文章都表明要用一个较大的素数来作为哈希表的大小，也就是要模一个较大的素数。但为什么就是要用素数呢？简单分析一下可以看出玄机。</p>
<p>先看看如果用一个合数8作为哈希表大小，0-30在哈希表中的散射情况：</p>
<p>（表1）<br>
<img src="https://MouZaiSi-Demo.github.io//post-images/1617357691752.png" alt="" loading="lazy"></p>
<p>再来看看用质数7作为哈希表大小，0-30在哈希表中的散射情况：</p>
<p>（表2）<br>
<img src="https://MouZaiSi-Demo.github.io//post-images/1617357731692.png" alt="" loading="lazy"></p>
<p>我们都知道，合数8除了1和自身以外，还有2跟4这两个因数。观察表1的单独一列可以发现，这些在同一列的数，他们实际上就是上一个数+8，而查看2、4、6这三行我们发现，因为2 4 6 能被2（或4）整除，而在同一列上的数在+8以后一样满足可以被2（或4）整除的这一特性。例如4这一列，4、12、20、28，这些哈希映射在同一个格子里的数都是前一个数+8，然后他们都能被2和4整除，这样就导致他们之间有很强烈的关系，很容易发生哈希冲突。</p>
<p>再来看看表2，同样情况，同一列中的数都是由上一个数+7得到的，但因为7是一个素数，它除了1跟本身之外没有其他因数，所以在同一列的数里就找不到我们刚刚所说的那种特性。</p>
<p>而我们都知道，哈希表设计目的就是希望尽量的随机散射，不希望这些在同一列上的元素（也就是会冲突的元素）之间具有关系，所以我们都采用素数作为哈希表的大小，从而避免模数相同的数之间具备公共因数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微积分的本质(9)--面积和斜率的关系？(求连续函数的平均值)]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/wei-ji-fen-de-ben-zhi-9-mian-ji-he-xie-lu-de-guan-xi-qiu-lian-xu-han-shu-de-ping-jun-zhi/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/wei-ji-fen-de-ben-zhi-9-mian-ji-he-xie-lu-de-guan-xi-qiu-lian-xu-han-shu-de-ping-jun-zhi/">
        </link>
        <updated>2021-03-24T09:10:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="微积分的本质9-面积和斜率的关系求连续函数的平均值">微积分的本质(9)--面积和斜率的关系？(求连续函数的平均值)</h1>
<p>转自知乎文章(为了防止哪天消失...) 微积分的本质(9)--面积和斜率的关系？(求连续函数的平均值)</p>
<p><a href="https://www.zhihu.com/people/nuan-nuan-73-43">微积分的本质(9)--面积和斜率的关系？(求连续函数的平均值)</a></p>
<hr>
<h2 id="️总结️">❤️总结❤️</h2>
<p><strong>1.什么时候会用到微积分呢？</strong></p>
<ul>
<li>①当问题可以通过<strong>细分、相加</strong>的方式进行<strong>估算</strong>，可以利用微积分解决。</li>
<li>②如果是<strong>有限</strong>数量求均值，我们知道利用<strong>相加除以个数</strong>的方法解决问题，那么推广到<strong>连续变量求平均值</strong>，也就是<strong>无限</strong>数量的话，可以用<strong>积分</strong>来描述本问题。这种方法在<strong>概率论</strong>中常出现。</li>
</ul>
<p><strong>2. 求连续函数 f(x) 在区间 [a, b] 的平均值</strong></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577110836.jpg" alt="" loading="lazy"><img src="1.jpg" alt="" loading="lazy"></p>
<ul>
<li>计算任意连续函数 f(x) 的平均值，归根到底是要<strong>寻*找原函数*</strong> F(x)</li>
<li>然后将平均值=<strong>原函数的高度变化值/宽度</strong>=<strong>原函数在这个区间起点与终点连线的斜率</strong>（这是因为 f(x) 是原函数 F(x) 在每一点切线斜率的值），</li>
<li>这样就将<strong>求解连续函数平均值转化为原函数各点切线的平均斜率</strong>，这样就仅仅考虑起点、终点，不需要考虑中间的任何点。</li>
</ul>
<p><strong>可以看得出为什么原函数是解决积分问题的关键 ✅</strong>✅✅</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577302553.png" alt="" loading="lazy"><img src="2.png" alt="" loading="lazy"></p>
<hr>
<h2 id="ヽノ正文ヽノ">✿✿ヽ(°▽°)ノ✿正文✿✿ヽ(°▽°)ノ✿</h2>
<p>本部分将包含以下三部分内容：</p>
<ol>
<li><img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]" loading="lazy"> 在 <img src="https://www.zhihu.com/equation?tex=%5B0%2C%5Cpi%5D" alt="[公式]" loading="lazy"> 区间的平均高度是什么？</li>
<li>面积与斜率的关系</li>
<li>将 <img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]" loading="lazy"> 一般化为任意的函数 <img src="https://www.zhihu.com/equation?tex=f%28x%29" alt="[公式]" loading="lazy"></li>
</ol>
<h2 id="1-在-区间的平均高度是什么">1.<img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]" loading="lazy"> 在 <img src="https://www.zhihu.com/equation?tex=%5B0%2C%5Cpi%5D" alt="[公式]" loading="lazy"> 区间的平均高度是什么？</h2>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577316248.jpg" alt="" loading="lazy"><img src="3.jpg" alt="" loading="lazy"></p>
<p>这个问题不是没有实际意义。事实上，<strong>世界上好多周期现象都可以用正弦函数来描述</strong>。 如，我们研究夏天与冬天太阳能板的充电效率，就可通过研究正弦函数上半周期的平均值&amp;下半周期的平均值的差异来解决。</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577321056.jpg" alt="" loading="lazy"><img src="4.jpg" alt="" loading="lazy"></p>
<p>提到平均值，我们一般指的是有限个变量值。但 <img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]" loading="lazy"> 在 <img src="https://www.zhihu.com/equation?tex=%5B0%2C%5Cpi%5D" alt="[公式]" loading="lazy"> 区间有<strong>无数个变化</strong>的值，因此我们不能把对应的函数值加起来，然后除以无穷大。</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577326804.jpg" alt="" loading="lazy"><img src="5.jpg" alt="" loading="lazy"></p>
<p>这实际上就是求<strong>连续函数值的平均值</strong>。 当有这种直觉产生的时候，就可以运用<strong>积分</strong>来解决问题的核心。</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577332404.jpg" alt="" loading="lazy"><img src="6.jpg" alt="" loading="lazy"></p>
<p><strong>利用有限数值来进行估算是一个不错的选择。</strong></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577337366.jpg" alt="" loading="lazy"><img src="7.jpg" alt="" loading="lazy"></p>
<p>假设无数个点取平均值是有意义的，那么<strong>取越来越多的点来计算高度和并取均值。这样计算出的平均值越来越接近实际的连续变量平均值</strong>。</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577343168.png" alt="" loading="lazy"><img src="8.png" alt="" loading="lazy"></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577352321.jpg" alt="" loading="lazy"><img src="9.jpg" alt="" loading="lazy"></p>
<p>当我们取间隔 dx 越来越小，那么将会越来越接近真实值，利用微积分的几何意义，图像的平均高度=面积/宽度，</p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577360501.jpg" alt="" loading="lazy"><img src="10.jpg" alt="" loading="lazy"></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577364770.png" alt="" loading="lazy"><img src="11.png" alt="" loading="lazy"></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577370995.jpg" alt="" loading="lazy"><img src="12.jpg" alt="" loading="lazy"></p>
<p>经过上述整理，可得<strong>在某一个区间上的所有切线的平均斜率等于起点与终点连线的斜率</strong></p>
<h2 id="3将-sinx-一般化为任意函数">3.将 sinx 一般化为任意函数</h2>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577382333.jpg" alt="" loading="lazy"><img src="13.jpg" alt="" loading="lazy"></p>
<p>实际上是通过分割，不断的减小 <strong>dx</strong>  ，越来越接近真实值。<strong>这恰恰说明当我们取的点数越多，近似出越来越精确的平均值。</strong></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577390731.jpg" alt="" loading="lazy"><img src="14.jpg" alt="" loading="lazy"></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577395649.png" alt="" loading="lazy"><img src="15.png" alt="" loading="lazy"></p>
<p><img src="https://MouZaiSi-Demo.github.io//post-images/1616577401478.jpg" alt="" loading="lazy"><img src="16.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图形打印和数学的关系]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/tu-xing-da-yin-he-shu-xue-de-guan-xi/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/tu-xing-da-yin-he-shu-xue-de-guan-xi/">
        </link>
        <updated>2021-01-25T06:35:51.000Z</updated>
        <content type="html"><![CDATA[<p>1.图形打印是需要遍历图形的整块的 一般是矩形或正方形 所以循环嵌套的需要知道行</p>
<p>2.满足线性规划或者其他代数表示图形的条件(<strong>important</strong>)</p>
<p>3.遍历打印即可</p>
<hr>
<p><strong>L1-002</strong> <strong>打印沙漏</strong></p>
<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p>
<pre><code>*****
 ***
  *
 ***
*****
</code></pre>
<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<h3 id="输入格式">输入格式:</h3>
<p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p>
<h3 id="输出格式">输出格式:</h3>
<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p>
<h3 id="输入样例">输入样例:</h3>
<pre><code class="language-in">19 *
</code></pre>
<h3 id="输出样例">输出样例:</h3>
<pre><code class="language-out">*****
 ***
  *
 ***
*****
2
</code></pre>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
using namespace std;
int main(void)
{
    int x, n;
    char c;

    cin &gt;&gt; x &gt;&gt; c;
    if (x == 1)
    {
        cout &lt;&lt; c &lt;&lt; endl;
        cout &lt;&lt; &quot;0&quot;;
        return 0;
    }

    for (int i = 0; i &lt; x; i++)
    {
        if ((2 * i * (i + 2) + 1) &gt; x)
        {
            n = i - 1;
            break;
        }
    }
    int row = n * 2 + 1;//算一共打印多少行 才好用笛卡尔坐标下的线性规划
    for (int i = 1; i &lt;= row; i++)//x轴从1开始
    {
        for (int j = 1; j &lt;= row; j++)//y轴从1开始
        {
            if ((j + i &lt;= row + 1 &amp;&amp; i &lt;= j) || (j + i &gt;= row + 1 &amp;&amp; i &gt;= j))cout &lt;&lt; c;
            else if (i &gt; j &amp;&amp; i + j &lt; row + 1)  cout &lt;&lt; &quot; &quot;;
        }
        cout &lt;&lt; endl;
    }
    cout &lt;&lt; (x - (2 * n * (n + 2) + 1));

    return 0;
}
</code></pre>
<hr>
<p>输入一个奇数n，输出一个由‘*’构成的n阶实心菱形。</p>
<p>输入格式</p>
<p>一个奇数n。</p>
<p>输出格式</p>
<p>输出一个由‘*’构成的n阶实心菱形。</p>
<p>具体格式参照输出样例。</p>
<p>数据范围</p>
<p>1≤n≤991≤n≤99</p>
<p>输入样例：</p>
<pre><code>5
</code></pre>
<p>输出样例：</p>
<pre><code>  *  
 *** 
*****
 *** 
  *  
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://MouZaiSi-Demo.github.io//post-images/1611556590690.png" alt="" loading="lazy"></figure>
<p>code:</p>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cmath&gt;

using namespace std;

int main(void)
{
    int n;
    cin &gt;&gt; n;

    int cx = n / 2, cy = n / 2;//图形中心点
    for (int i = 0; i &lt; n; i ++ ) 
    {
        for (int j = 0; j &lt; n; j ++ )
            if (abs(i - cx) + abs(j - cy) &lt;= n / 2) cout &lt;&lt; '*';//小于n/2就是边长的一半
            else cout &lt;&lt; ' ';
        cout &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 齐次线性方程组的基础解系]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/qi-ci-xian-xing-fang-cheng-zu-de-ji-chu-jie-xi/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/qi-ci-xian-xing-fang-cheng-zu-de-ji-chu-jie-xi/">
        </link>
        <updated>2021-01-17T05:11:10.000Z</updated>
        <content type="html"><![CDATA[<p>采取向量空间的观点， <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> <strong>元线性方程组的解都是</strong> <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> <strong>维向量</strong>。齐次线性方程组的解有一组重要的性质：对于一个方程组 <img src="https://www.zhihu.com/equation?tex=AX%3D0%2C" alt="[公式]" loading="lazy"> 若 <img src="https://www.zhihu.com/equation?tex=X_1%2CX_2" alt="[公式]" loading="lazy"> 是它的解， <img src="https://www.zhihu.com/equation?tex=k" alt="[公式]" loading="lazy"> 是一个数，则 <img src="https://www.zhihu.com/equation?tex=X_1%2BX_2" alt="[公式]" loading="lazy"> 和 <img src="https://www.zhihu.com/equation?tex=kX_1" alt="[公式]" loading="lazy"> 也是它的解。于是当 <img src="https://www.zhihu.com/equation?tex=AX%3D0" alt="[公式]" loading="lazy"> 有非零解时，存在一系列线性无关的解 <img src="https://www.zhihu.com/equation?tex=X_i%2C" alt="[公式]" loading="lazy"> 使得它的每个解都是这些解的线性组合，称这些解是它的一个基础解系。</p>
<p>进一步地，任何一个 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> 元齐次线性方程组的全体解是 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> 维向量空间的一个子空间，而此方程组的一个基础解系，就是这个子空间的一个基。</p>
<p>根据有关线性空间的结论，对于一个 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> 维线性空间，任取其中的一些向量，则这些向量构成此空间的基的充要条件是这些向量有 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]" loading="lazy"> 个，并且它们线性无关。所以同一齐次线性方程组的两个基础解系总是含有同样多个解，且确定了基础解系所含解的数目，对于这么多个解，它们是否构成基础解系，仅取决于它们是否线性无关。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021.1.15复习线性代数 矩阵分块有感]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/2021115-fu-xi-xian-xing-dai-shu-ju-zhen-fen-kuai-you-gan/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/2021115-fu-xi-xian-xing-dai-shu-ju-zhen-fen-kuai-you-gan/">
        </link>
        <updated>2021-01-17T05:10:15.000Z</updated>
        <content type="html"><![CDATA[<p>对于&quot;耻辱书中&quot;第六版的p46有一种矩阵分块的操作 可以让矩阵分块成新的大矩阵然后对其进行矩阵的操作是等价于对原矩阵进行矩阵的操作</p>
<p>G. Strang的Linear Algebra公开课中讲过 就算是高斯也没法一眼看出矩阵乘法能够分块 孟岩当年写过三篇《理解矩阵》，一开始就提出来“矩阵乘法为什么能分块”这个问题，到最后也没展开说，大概算是太监了</p>
<p>但是我找到一个比较好的解释方法:<strong>矩阵是对矢量的bai操作，可以看du做对n维空间上zhi的点的操作，dao相加是对一个矢量各自zhuan操作后shu再将操作后的矢量求和；相乘是将矢量操作一次后再操作一次给出的矢量。<br>
将空间分成子空间后，操作就变成这些子空间的操作了。对于乘法就是将不同子空间中的矢量操作到另外空间后再组合。<br>
例如5X5矩阵分解为(3+2)X(3+2)的4块矩阵后，对应的5维空间相应分解为3+2维的子空间，A11块代表将3维空间中矢量操作到3维空间的操作，A12代表将2维空间中矢量操作到3维空间的操作，以此类推。因此两次操作（矩阵相乘）可以归结为这些子空间中操作的组合喽。</strong></p>
<p>转自<a href="https://zhidao.baidu.com/question/330054200.html">矩阵计算的理论依据是什么？为什么矩阵的加、乘可以这样算？为什么矩阵可分块计算？</a>用户laocai10000的回答</p>
<hr>
<p>晚餐时间 看耻辱书p64-65<strong>猜测</strong>增广矩阵与分块矩阵有关,对元素内所有的分块进行初等变化等于对原矩阵的初等变化(前提是两个分块矩阵是同时进行初等变化的),</p>
<p>同时发现 求逆矩阵 (A,E)&gt;&gt;(E,A的可逆)与求AX=B的方法是一样的  都是通过有限次初等行变换(假设是P)将左边的分块矩阵变为E,右边的矩阵就是我们要的答案了) 那是因为 左边的分块矩阵进过有限次初等变化变成E推出 P是左边分块矩阵的逆矩阵 所以右边的分块矩阵就可以通过原式子做逆变化得到 我们想要的X了 .(此时 注意到 当X是向量就表示成x 当B是向量就表示成b 这样发现求线性方程组的Ax=b就是这种方法的特殊情况 所以增广矩阵就是这么来的 本质应该跟分块矩阵和初等变化是有关系的)</p>
<p>ps:等我寒假再过线性代数的时候用公式来表示  现在实属没时间</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021.1.12 C语言混沌的一天]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/2021112-c-yu-yan-hun-dun-de-yi-tian/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/2021112-c-yu-yan-hun-dun-de-yi-tian/">
        </link>
        <updated>2021-01-12T15:41:46.000Z</updated>
        <content type="html"><![CDATA[<p>今天状态很不好 哎水一下 递归文 救一下可怜的隔离cbh</p>
<pre><code class="language-c">void PrintN(int N) 
{    
	if(N == 0) return;  //[1]回归条件; 
    
	PrintN(N - 1);      //[2]递推;  
    
	printf(&quot;%d, &quot;, N);  //[3]当前 case 的工作; 
} 
</code></pre>
<p>这个函里，很清晰的展现了递归函数的组成部分：<br>
其中：[2] 和 [3] 组成基本逻辑。递归的 idea 和数学归纳法是同一个思路。<br>
数学归纳法是：<br>
（1）证明 case 0 成立；<br>
（2）如果 case i 成立 =&gt; 则 case ( i + 1 ) 成立。</p>
<p>在这个问题里，</p>
<p><strong>定义函数 PrintN ( by argument N )  means: 打印从 1 到 N 的一系列数字。</strong></p>
<p>因此，该函数的实现逻辑是：</p>
<p>（1）打印出从 1 到 N-1 的一系列数字。即调用 PrintN ( N - 1) ；这是 PrintN 的定义；<br>
（2）然后打印出 N；</p>
<p>分别对应了代码中的 [2], [3] 。</p>
<p>然后找出回归条件，本例子中，就是 PrintN 打印的一系列数字是从 ？ 开始的，假设从 N1 开始，则应该在 case N &lt; N1 时回归。也就是说回归条件是：</p>
<p>（3）if ( N &lt; N1 ) return;</p>
<p>本题目中，N1 = 1；对应于代码中的 [1];</p>
<p>因此上面的函数也等价于：</p>
<pre><code class="language-cpp">void PrintN(int N) 
{
    if(N &gt; 0) 
    {
        PrintN(N - 1);
        printf(&quot;%d, &quot;, N);
    }
} 
</code></pre>
<p>可以表述成一下的 call是调用的意思</p>
<p>call PrintN(4)</p>
<p>|-- call PrintN(3)</p>
<p>|     |--call PrintN(2)</p>
<p>|     |     |--call PrintN(1)</p>
<p>|     |     |     |--call PrintN(0); //return directly;</p>
<p>|     |     |     |--printf 1; // output 1, return from PrintN(1);</p>
<p>|     |     |--printf 2; //output 2, return from PrintN(2);</p>
<p>|     |--printf 3; //output 3, return from PrintN(3);</p>
<p>|--printf 4; //output 4, return from PrintN(4);</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言中++比=优先级高，但为什么x=y++;是想把y的值赋值给x再y自加1]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/c-yu-yan-zhong-bi-you-xian-ji-gao-dan-wei-shi-me-xyshi-xiang-ba-y-de-zhi-fu-zhi-gei-x-zai-y-zi-jia-1/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/c-yu-yan-zhong-bi-you-xian-ji-gao-dan-wei-shi-me-xyshi-xiang-ba-y-de-zhi-fu-zhi-gei-x-zai-y-zi-jia-1/">
        </link>
        <updated>2021-01-10T13:02:00.000Z</updated>
        <content type="html"><![CDATA[<p>抖个机灵</p>
<p>C++界好像一直有这样一个笑话<br>
C++为了向后兼容C，它必须先照顾到C的种种问题，然后才能++。这就是自增操作符顺序的问题了。</p>
<hr>
<p>目前的理解:</p>
<p>后置自增操作符本身属性决定。</p>
<p>x=y++；</p>
<p>y++中后置++操作包含两步，一是取值，二是自增：</p>
<p>第一步取值，其结果是将y的值取出来，因为遇到=，所以将y值赋给x</p>
<p>第二步自增，其结果是将y的值加1<br>
这两步操作虽然可以分开来看，但却又是不可分割的。<br>
与之相关的、另一种容易误解的用法是：*ptr++（假设int *ptr=&amp;a[0]） <a href="https://mouzaisi-demo.github.io/post/phe-pde-qu-bie/">(*p)++和*p++的区别?</a></p>
<p>取值运算符<em>与后置自增运算符++有相同优先级，且结合方向从右至左，按理说，应该先执行ptr++，使得ptr=&amp;a[1]，从而</em>ptr++的值为a[1]。</p>
<p>然而，因为后置++的固有属性，<em>ptr++是先取ptr的值与</em>结合（第一步），再执行ptr自增加1操作（第二步），即*ptr++的值为a[0]。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线性方程组什么时候无解？多个解？唯一解？]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/xian-xing-fang-cheng-zu-shi-me-shi-hou-wu-jie-duo-ge-jie-wei-yi-jie/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/xian-xing-fang-cheng-zu-shi-me-shi-hou-wu-jie-duo-ge-jie-wei-yi-jie/">
        </link>
        <updated>2021-01-10T07:49:34.000Z</updated>
        <content type="html"><![CDATA[<p>又是一篇水博客 冲冲冲 冲完期末考刷算法!!!</p>
<p><a href="https://blog.csdn.net/lynn0085/article/details/79375614">线性方程组什么时候无解？多个解？唯一解？</a></p>
<hr>
<p>在本文做些更加直观的解释:</p>
<p><em><strong>其实理论上 无论是齐次非齐次都是弄增广矩阵  只是齐次的没有必要这么搞</strong></em></p>
<p><strong>非齐次线性方程组:多解，无解，唯一解</strong></p>
<p>1.化简后的有效方程组个数，小于未知数个数。这样的方程组有无穷多个解化简后的有效方程组个数，小于未知数个数。这样的方程组有无穷多个解的意思是 <strong>A矩阵张成的空间是非满秩的 也就是有冗余即多余的基向量(比如有四个基向量(线性方程组中表示的是方程组的个数有四个),但张成这个空间其实只用其中三个 有一个是没用的 所以有效的基向量是三个)</strong> <strong>此时向量的秩也是非满秩的,也是有冗余的 又因为他们A矩阵张成的空间的维数与b向量的维数 相等  所以是有机会存在b在A矩阵张成的空间中的 且 因为冗余所以会有非常多的解</strong></p>
<p>2.化简后导出(0=d)形式的方程，方程组无解<strong>A矩阵的秩小于增广矩阵的秩 说明b向量不在A矩阵张成的列空间中 且b在比A矩阵张成空间的维度更高一些 根据二维世界难以理解三维世界的物理猜想 是得不到一个向量x根据A矩阵进行空间变化出b向量的</strong></p>
<p>3.不知道为什么该博客没有给出唯一解的例子 唯一解的例子是这样的:<strong>在第二条的基础上 我们知道非满秩有冗余 那么如果满秩 就是没有冗余 所以信息量是等价的 既然b在A矩阵的张成空间里 那么解就是唯一的</strong></p>
<p><strong>齐次线性方程组,非零解，零解</strong></p>
<p><em><strong>多个解叫做有非零解。唯一解叫做零解</strong></em></p>
<p>1.如果有效方程组个数小于未知数个数，叫做有非零解（多个解）如果有效方程组个数小于未知数个数，叫做有非零解（多个解）的意思是**同上 A矩阵有冗余 所以有非零解  **</p>
<p>2.如果等于，叫做只有零解（唯一解）<strong>满秩 没有冗余</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线性代数计算器(web版)]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/xian-xing-dai-shu-ji-suan-qi-web-ban/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/xian-xing-dai-shu-ji-suan-qi-web-ban/">
        </link>
        <updated>2021-01-10T04:47:13.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://matrixcalc.org/zh/?from=mergeek.com">Matrix calculator</a></p>
<p>推荐一个行列式计算器</p>
<p>直接展示高斯消元法和莱布尼兹公式以及Montante's methond(https://MouZaiSi-Demo.github.io//post-images/1610255910507.png)!<br>
<a href="https://MouZaiSi-Demo.github.io//post-images/1610255919055.png"></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[增广矩阵的秩的意义是什么？]]></title>
        <id>https://MouZaiSi-Demo.github.io/post/zeng-guang-ju-zhen-de-zhi-de-yi-yi-shi-shi-me/</id>
        <link href="https://MouZaiSi-Demo.github.io/post/zeng-guang-ju-zhen-de-zhi-de-yi-yi-shi-shi-me/">
        </link>
        <updated>2021-01-10T02:55:21.000Z</updated>
        <content type="html"><![CDATA[<p>在&quot;耻辱柱&quot;书中</p>
<figure data-type="image" tabindex="1"><img src="https://MouZaiSi-Demo.github.io//post-images/1610248380465.jpg" alt="" loading="lazy"></figure>
<p>在提到n元线性方程组的时候Ax=b 直接讲了矩阵A乘向量b与向量b之间秩的关系</p>
<p>虽然直接由方程组的解去理解定理3的三条 是十分容易的 但你知道意义吗?</p>
<p>尤其是对计算机学生来说,直观的意义你理解吗?</p>
<p>所以我做了以下几点思考</p>
<hr>
<blockquote>
<p>增广矩阵的秩与一般矩阵的秩表示的几何意义相同。（你别告诉我你不知道矩阵的秩的几何意义。）</p>
</blockquote>
<p>在【A】*【X】=【b】中</p>
<p>增广矩阵的秩与矩阵A的秩相同时，则表明增广矩阵所张成的空间与与【A】所张成的空间相同，表明了【b】在【A】所张成的空间中。此时非齐次线性方程组有解。</p>
<p>注意 增广矩阵的秩不可能小于原矩阵,而且在任何矩阵中新增新的向量都不应该导致该矩阵降秩。</p>
<p>如果在一个确认的矩阵[A]中新增一个或者多个向量得到矩阵[B]，若这些向量存在于[A]所张成的空间中，则[A]=[B],[B]的秩当然也会等于[A]的秩。如果新增的向量不存在于[A]所张成的空间中，[A]!=[B]且[B]的秩大于[A]。</p>
<p>根本原因就是矩阵的秩表示的是矩阵张成的列空间的维度,而维度越高的列空间所包含的信息越多.比如三维空间中所包含的信息就一定大于二维空间,而在一个确定的矩阵中添加向量则相当于在该矩阵表示的空间中添加信息.在一个高维空间中添加信息不可能使该空间降维,因为这已经违反了物理学的信息守恒.</p>
]]></content>
    </entry>
</feed>